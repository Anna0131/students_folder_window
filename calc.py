a= {
                "組距0_1的人數": 1,
                "組距1_2的人數": 1,
                "組距2_3的人數": 3,
                "組距3_4的人數": 3,
                "組距4_5的人數": 1,
                "組距5_6的人數": 1,
                "組距6_7的人數": 2,
                "組距7_8的人數": 1,
                "組距8_9的人數": 2,
                "組距9_10的人數": 3,
                "組距10_11的人數": 0,
                "組距11_12的人數": 1,
                "組距12_13的人數": 3,
                "組距13_14的人數": 0,
                "組距14_15的人數": 2,
                "組距15_16的人數": 2,
                "組距16_17的人數": 0,
                "組距17_18的人數": 3,
                "組距18_19的人數": 1,
                "組距19_20的人數": 1,
                "組距20_21的人數": 3,
                "組距21_22的人數": 2,
                "組距22_23的人數": 0,
                "組距23_24的人數": 2,
                "組距24_25的人數": 0,
                "組距25_26的人數": 1,
                "組距26_27的人數": 2,
                "組距27_28的人數": 0,
                "組距28_29的人數": 1,
                "組距29_30的人數": 2,
                "組距30_31的人數": 0,
                "組距31_32的人數": 3,
                "組距32_33的人數": 3,
                "組距33_34的人數": 0,
                "組距34_35的人數": 2,
                "組距35_36的人數": 0,
                "組距36_37的人數": 1,
                "組距37_38的人數": 3,
                "組距38_39的人數": 3,
                "組距39_40的人數": 3,
                "組距40_41的人數": 0,
                "組距41_42的人數": 1,
                "組距42_43的人數": 2,
                "組距43_44的人數": 1,
                "組距44_45的人數": 2,
                "組距45_46的人數": 0,
                "組距46_47的人數": 1,
                "組距47_48的人數": 3,
                "組距48_49的人數": 3,
                "組距49_50的人數": 1,
                "組距50_51的人數": 0,
                "組距51_52的人數": 2,
                "組距52_53的人數": 1,
                "組距53_54的人數": 1,
                "組距54_55的人數": 2,
                "組距55_56的人數": 4,
                "組距56_57的人數": 5,
                "組距57_58的人數": 2,
                "組距58_59的人數": 12,
                "組距59_60的人數": 6,
                "組距60_61的人數": 11,
                "組距61_62的人數": 9,
                "組距62_63的人數": 8,
                "組距63_64的人數": 1,
                "組距64_65的人數": 0,
                "組距65_66的人數": 8,
                "組距66_67的人數": 10,
                "組距67_68的人數": 11,
                "組距68_69的人數": 1,
                "組距69_70的人數": 4,
                "組距70_71的人數": 7,
                "組距71_72的人數": 10,
                "組距72_73的人數": 2,
                "組距73_74的人數": 14,
                "組距74_75的人數": 10,
                "組距75_76的人數": 12,
                "組距76_77的人數": 0,
                "組距77_78的人數": 8,
                "組距78_79的人數": 8,
                "組距79_80的人數": 5,
                "組距80_81的人數": 3,
                "組距81_82的人數": 5,
                "組距82_83的人數": 1,
                "組距83_84的人數": 10,
                "組距84_85的人數": 4,
                "組距85_86的人數": 6,
                "組距86_87的人數": 9,
                "組距87_88的人數": 8,
                "組距88_89的人數": 7,
                "組距89_90的人數": 9,
                "組距90_91的人數": 3,
                "組距91_92的人數": 0,
                "組距92_93的人數": 7,
                "組距93_94的人數": 2,
                "組距94_95的人數": 7,
                "組距95_96的人數": 10,
                "組距96_97的人數": 3,
                "組距97_98的人數": 4,
                "組距98_99的人數": 1,
                "組距99_100的人數": 4
            }

def calculate_relative_performance(score, distribution, total_count,lose_num):
    """
    計算推估相對表現
    score: 學生的分數
    distribution: 班級分數分布的組距字典資料
    total_count: 班級總人數
    lose_num: 分數小於等於學生分數的人數(輸過區間總人數)
    return: 推估相對表現
    """ 
    interval_min = None  # 分數區間的最小值
    interval_max = None  # 分數區間的最大值
    range_num = 0 #區間總人數

    for key, value in distribution.items():
        min, max = key.split("_")
        min = int(min.replace("組距", ""))
        max = int(max.replace("的人數", ""))
        
        if min > score:           
            lose_num += value   

        if min <= score <= max:             
            interval_min = min
            interval_max = max            
            #print(interval_max)
            range_num=value
            
    #print(range_num)
    #print(lose_num)
    if interval_min is None   or   interval_max is None:
        return None  # 學生的分數不在任何一個分數區間內

    interval_key = f"組距{interval_min+1}_{interval_max+1}的人數"   
    #print(interval_key)

    if interval_key in distribution:
        interval_index = list(distribution.keys()).index(interval_key) #分數區間的索引值
        relative_performance = (((1 - (score - interval_min) / (interval_max - interval_min)) * range_num + lose_num )/ total_count) * 100
        return round(relative_performance, 1)

    
print(calculate_relative_performance(94,a,353,0))
